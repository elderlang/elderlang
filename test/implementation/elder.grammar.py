import .lex
import .yacc
import .ast
class ElderLexer(Lexer):
	tokens = { OPEN_UNFORMATTEDSTRING, OPEN_FORMATTEDSTRING, OPEN_BLOCKCOMMENT, OPEN_LINECOMMENT, OPEN_NAME, OPEN_GLOBALNAMESPACE, OPEN_LOCALNAMESPACE, OPEN_EXPRESSION, OPEN_TYPE, OPEN_PARAMETER, OPEN_EXECUTION, OPEN_CONTAINER, CLOSE_UNFORMATTEDSTRING, CLOSE_FORMATTEDSTRING, CLOSE_BLOCKCOMMENT, CLOSE_LINECOMMENT, CLOSE_NAME, CLOSE_GLOBALNAMESPACE, CLOSE_LOCALNAMESPACE, CLOSE_EXPRESSION, CLOSE_TYPE, CLOSE_PARAMETER, CLOSE_EXECUTION, CLOSE_CONTAINER, SPACEAUTOFILLNAMES, SPACEAUTOFILLAUTOFILLANDNAME, IFELSE, IF, WHILE, SIGIL, NOT, AND, DOUBLEAND, OR, DOUBLEOR, RETURN }

	ignore = ' \t'
	ignore_newline = '\n+'

	# Extra action for newlines
	def ignore_newline(self, t):
		self.lineno += t.value.count('\n')

	def error(self, t):
		print("Illegal character '%s'" % t.value[0])
		self.index += 1
	OPEN_UNFORMATTEDSTRING = r'(')'
	OPEN_FORMATTEDSTRING = r'("|`)'
	OPEN_BLOCKCOMMENT = r'(/\*)'
	OPEN_LINECOMMENT = r'(#|//)'
	OPEN_NAME = r'([^\s\(\)\[\]\|\?\\.\$'":,;&@!#])'
	OPEN_GLOBALNAMESPACE = r'(::)'
	OPEN_LOCALNAMESPACE = r'(:)'
	OPEN_EXPRESSION = r'(^|;|,)'
	OPEN_TYPE = r'(<)'
	OPEN_PARAMETER = r'(\()'
	OPEN_EXECUTION = r'({)'
	OPEN_CONTAINER = r'(\[)'
	CLOSE_UNFORMATTEDSTRING = r'(')'
	CLOSE_FORMATTEDSTRING = r'("|`)'
	CLOSE_BLOCKCOMMENT = r'(\*/)'
	CLOSE_LINECOMMENT = r'($)'
	CLOSE_NAME = r'([ \s\(\)\[\]\|\?\\.\$'":,;&@!#]|//)'
	CLOSE_GLOBALNAMESPACE = r'($|//|:)'
	CLOSE_LOCALNAMESPACE = r'($|//|:)'
	CLOSE_EXPRESSION = r'(,|;|#|//|$)'
	CLOSE_TYPE = r'(>)'
	CLOSE_PARAMETER = r'(\))'
	CLOSE_EXECUTION = r'(})'
	CLOSE_CONTAINER = r'(\])'
	SPACEAUTOFILLNAMES = r'\s+'
	SPACEAUTOFILLAUTOFILLANDNAME = r'Name\s+AUTOFILL\(.*?\)'
	IFELSE = r'\?'
	IF = r'?'
	WHILE = r'\(CONTAINER\)'
	SIGIL = r'\$'
	NOT = r'!'
	AND = r'&'
	DOUBLEAND = r'&&'
	OR = r'\|'
	DOUBLEOR = r'\|\|'
	RETURN = r'@'
