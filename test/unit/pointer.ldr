
/**
 * outer allows us to test for storing pointers to functors.
 * We're not testing negative cases here, but it should be known that defining functors within the parameter block of another makes those functors immutable (i.e. they cannot be changed by simple assignment at call time).
 */
outer:
(
	/**
	 * undetermined is an explicit pointer that requires an paramument to function.
	 */
	undetermined: pointer to functor
	
	/**
	 * inner is a functor with a default value of another functor called 'default'.
	 * inner should function with AND without an overriding paramument to outer.
	 * pointer kind specification is necessary for 'default' to be treated as an object, rather than evaluated off the bat.
	 */
	inner := defval::(param)
	{
		try
		{
			undetermined(param)
		}
		catch
		{
			print 'undeterminable'
		}
	}
)

// Should print 'undeterminable'
outer.inner('SHOULD NOT PRINT')

/**
 * determined will be provided to outer to fill in for undetermined.
 */
determined::(param)
{
	print `param: {param}`
}

// Should print 'param: success!'
outer(undetermined = determined).inner('success')

/**
 * inner defined outside of outer should be a distinct object.
 * NOTE: when overriding a functor pointer, as we do here, you must keep the arguments the same (at least in number) or turn off the arg mapping feature, etc.
 */
inner_override::(vestigial::)
{
	print 'inner overridden'
}

// Should print 'inner overridden'
// FIXME: There is a bug if inner_override is just called 'inner' and outer tries to assign inner to itself.
outer(inner = inner_override).inner()

// Make sure the override wasn't permanent (it is).
// Should print 'undeterminable'
// NOTE: This currently prints 'inner overridden'.
outer.inner('SHOULD NOT PRINT')