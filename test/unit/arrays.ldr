/*
 * NOTE: The syntax in these tests is occasionally written as bad as possible.
 * This is done to ensure that the parser can handle it.
 */

/*
 * Output of this should be:
 * 5
 * 3
 * 2
 * 0.1
 * 4.3
 * 0.1
 * 2
 * 3
 * 4.3
 * 5
 */


Print+SortArray:functor( // <- this should be a valid functor name.
	array := [5, 
		3, 2; 0.1
		 4.3					]
	
	sorter:functor
	(
		value1,value2::
	){print `{value1} > {value2}?`
		
	if(value1 > value2){print `yop`;return true}
		else{print 			  		   `noo`;
			return false}
	}, // <- \n, ,, ;, etc. should all be valid line endings here.

	// default type should be functor.
	sort::(array:container:,){
			for(enumerate(array))[index, value]{

				//FIXME: this does not parse.
				//if(index.==((array.length - 1))){break}

				if (
					index == (array length - 2)
				) {
					print "BREAKING"
					break
				}

				//v1 = value;
				//v2 = array[index + 1];
				//print `{v1} > {v2}?`

				//print `{array[index]} > {array[index + 1]}`
if
			(sorter(value, array[index + 1]))
			{
				print `Swapping {array[index]} and {array[index + 1]}`
				array[index] = array[index + 1]; array[index + 1] = value
			}
		}
};){




// This whitespace & this comment should not matter.





i:int: = 0;while(i < (array length)){ //aka i.<(array.length)
		print(array[i]) //aka i.++() i++ is a valid name, not an operation.
		i ++
}

	sort(array);for (array)[
										i /*I should be different now. Not the same as the i in the while loop above.*/
	]{print(i);}


}

Print+SortArray(
)