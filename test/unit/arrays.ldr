/*
 * NOTE: The syntax in these tests is occasionally written as bad as possible.
 * This is done to ensure that the parser can handle it.
 */

/*
 * Output of this should be: (excluding debug prints)
 * 5
 * 3
 * 2
 * 0.1
 * 4.3
 * 0.1
 * 2
 * 3
 * 4.3
 * 5
 */


Print+SortArray:functor( // <- this should be a valid functor name.
	array := [5, 
		3, 2; 0.1
		 4.3					]
	
	sorter:
	(
		value1,value2::
	){//print `{value1} > {value2}?`
		
	if(value1 > value2){/*print `yop`;*/return true}
		else{/*print 			  		   `noo`*/;
			return false}
	}, // <- \n, ,, ;, etc. should all be valid line endings here.

	// default type should be functor.
	sort::(array:container:,){

		isOrdered:bool: = false
		while(! isOrdered){
			index := 0
			isOrdered = true
			while(index < array.length.-(1)){
if
				(sorter(array[index], array[index + 1]))
				{
					isOrdered = false
					value:: = array [
						index
					];
					print `Swapping {value} and {array[index + 1]}`
					array[index] = array[index + 1];
					
					# These should print the same number twice, then the original first number..
					#print `index: {array[index]}`
					#print `index + 1: {array[index + 1]}`
					#print `value: {value}`
					
					# This should print the first number.
					array[index + 1] = value
					#print `index + 1: {array[index + 1]}`
				}
				index ++
			}
			print array
		}
};){




// This whitespace & this comment should not matter.





i:int: = 0;while(i < (array length)){
		print(array[i])
		i.++()
}

	sort(array);for (array)[
										i /*I should be different now. Not the same as the i in the while loop above.*/
	]{print(i);}


}

Print+SortArray(
)